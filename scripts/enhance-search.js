#!/usr/bin/env node

const Database = require('better-sqlite3');
const path = require('path');

console.log('üîç Â§öË®ÄË™ûÊ§úÁ¥¢Ê©üËÉΩÊã°Âºµ‰∏≠...');

// Â§öË®ÄË™ûÊ§úÁ¥¢„Éá„Éº„ÇøÔºàÊó•Êú¨Ë™û„ÄÅ‰∏≠ÂõΩË™û„ÄÅÈüìÂõΩË™ûÁ≠âÔºâ
const multilingualTerms = {
  'cat': {
    ja: ['Áå´', '„Å≠„Åì', '„Éç„Ç≥'],
    zh: ['Áå´', 'Ë≤ì', 'Áå´Âí™'],
    ko: ['Í≥†ÏñëÏù¥', 'ÎÉêÏòπÏù¥'],
    ru: ['–∫–æ—Ç', '–∫–æ—à–∫–∞', '–∫–æ—Ç–∏–∫'],
    ar: ['ŸÇÿ∑', 'ŸÇÿ∑ÿ©'],
    hi: ['‡§¨‡§ø‡§≤‡•ç‡§≤‡•Ä', '‡§¨‡§ø‡§≤‡§æ‡§µ']
  },
  'dog': {
    ja: ['Áä¨', '„ÅÑ„Å¨', '„Ç§„Éå', 'Áä¨'],
    zh: ['Áãó', 'Áä¨', 'ÁãóÁãó'],
    ko: ['Í∞ú', 'Í∞ïÏïÑÏßÄ', 'Î©çÎ©çÏù¥'],
    ru: ['—Å–æ–±–∞–∫–∞', '–ø—ë—Å', '—Å–æ–±–∞—á–∫–∞'],
    ar: ['ŸÉŸÑÿ®', 'ŸÉŸÑÿ®ÿ©'],
    hi: ['‡§ï‡•Å‡§§‡•ç‡§§‡§æ', '‡§∂‡•ç‡§µ‡§æ‡§®']
  },
  'house': {
    ja: ['ÂÆ∂', '„ÅÑ„Åà', '„Ç§„Ç®', '‰ΩèÂÆÖ', 'ÂÆ∂Â±ã'],
    zh: ['ÊàøÂ≠ê', 'ÊàøÂ±ã', '‰ΩèÂÆÖ', 'ÂÆ∂'],
    ko: ['Ïßë', 'Ï£ºÌÉù', 'Í∞ÄÏò•'],
    ru: ['–¥–æ–º', '–¥–æ–º–∏–∫', '–∂–∏–ª–∏—â–µ'],
    ar: ['ÿ®Ÿäÿ™', 'ŸÖŸÜÿ≤ŸÑ', 'ÿØÿßÿ±'],
    hi: ['‡§ò‡§∞', '‡§Æ‡§ï‡§æ‡§®', '‡§Ü‡§µ‡§æ‡§∏']
  },
  'book': {
    ja: ['Êú¨', '„Åª„Çì', '„Éõ„É≥', 'Êõ∏Á±ç', 'Âõ≥Êõ∏'],
    zh: ['‰π¶', 'Êõ∏', '‰π¶Á±ç', 'Âõæ‰π¶'],
    ko: ['Ï±Ö', 'ÏÑúÏ†Å', 'ÎèÑÏÑú'],
    ru: ['–∫–Ω–∏–≥–∞', '–∫–Ω–∏–∂–∫–∞'],
    ar: ['ŸÉÿ™ÿßÿ®', 'ŸÖÿ§ŸÑŸÅ'],
    hi: ['‡§ï‡§ø‡§§‡§æ‡§¨', '‡§™‡•Å‡§∏‡•ç‡§§‡§ï', '‡§ó‡•ç‡§∞‡§Ç‡§•']
  },
  'water': {
    ja: ['Ê∞¥', '„Åø„Åö', '„Éü„Ç∫'],
    zh: ['Ê∞¥', 'Ê∞¥‰ªΩ'],
    ko: ['Î¨º', 'ÏàòÎ∂Ñ'],
    ru: ['–≤–æ–¥–∞', '–≤–æ–¥–∏—á–∫–∞'],
    ar: ['ŸÖÿßÿ°', 'ŸÖŸäÿßŸá'],
    hi: ['‡§™‡§æ‡§®‡•Ä', '‡§ú‡§≤']
  },
  'car': {
    ja: ['Ëªä', '„Åè„Çã„Åæ', '„ÇØ„É´„Éû', 'Ëá™ÂãïËªä'],
    zh: ['ËΩ¶', 'Ëªä', 'Ê±ΩËΩ¶', 'ËΩøËΩ¶'],
    ko: ['Ï∞®', 'ÏûêÎèôÏ∞®', 'ÏäπÏö©Ï∞®'],
    ru: ['–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–∞–≤—Ç–æ'],
    ar: ['ÿ≥Ÿäÿßÿ±ÿ©', 'ÿπÿ±ÿ®ÿ©'],
    hi: ['‡§ï‡§æ‡§∞', '‡§ó‡§æ‡§°‡§º‡•Ä', '‡§µ‡§æ‡§π‡§®']
  }
};

function enhanceSearch() {
  const dbPath = path.join(__dirname, '../data/noun_gender.db');
  const db = new Database(dbPath);
  
  try {
    // Â§öË®ÄË™ûÊ§úÁ¥¢„ÉÜ„Éº„Éñ„É´‰ΩúÊàê
    db.exec(`
      CREATE TABLE IF NOT EXISTS multilingual_search (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        english_word TEXT NOT NULL,
        search_term TEXT NOT NULL,
        language_code TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE INDEX IF NOT EXISTS idx_multilingual_search_term ON multilingual_search(search_term);
      CREATE INDEX IF NOT EXISTS idx_multilingual_search_english ON multilingual_search(english_word);
      CREATE INDEX IF NOT EXISTS idx_multilingual_search_language ON multilingual_search(language_code);
    `);
    
    // Êó¢Â≠ò„Éá„Éº„Çø„Çí‰∏ÄÂ∫¶„ÇØ„É™„Ç¢
    db.prepare('DELETE FROM multilingual_search').run();
    
    const insertStmt = db.prepare('INSERT INTO multilingual_search (english_word, search_term, language_code) VALUES (?, ?, ?)');
    
    let totalInserted = 0;
    
    Object.entries(multilingualTerms).forEach(([englishWord, translations]) => {
      // Ëã±Ë™û„ÅÆÊ§úÁ¥¢Ë™û„ÇíËøΩÂä†
      insertStmt.run(englishWord, englishWord, 'en');
      insertStmt.run(englishWord, englishWord.toLowerCase(), 'en');
      totalInserted += 2;
      
      // ÂêÑË®ÄË™û„ÅÆÊ§úÁ¥¢Ë™û„ÇíËøΩÂä†
      Object.entries(translations).forEach(([langCode, terms]) => {
        terms.forEach(term => {
          insertStmt.run(englishWord, term, langCode);
          totalInserted++;
        });
      });
    });
    
    console.log(`‚úÖ Â§öË®ÄË™ûÊ§úÁ¥¢Ë™û ${totalInserted} ‰ª∂„ÇíËøΩÂä†`);
    
    // ÂÖ®ÊñáÊ§úÁ¥¢„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàêÔºàSQLite FTS5Ôºâ
    console.log('üöÄ ÂÖ®ÊñáÊ§úÁ¥¢„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàê‰∏≠...');
    
    try {
      db.exec(`
        CREATE VIRTUAL TABLE IF NOT EXISTS search_fts USING fts5(
          english_word,
          translation,
          language,
          search_terms,
          content='all_words',
          content_rowid='rowid'
        );
      `);
      
      // FTS„ÉÜ„Éº„Éñ„É´„Å´„Éá„Éº„Çø„ÇíÊåøÂÖ•
      db.exec(`
        INSERT INTO search_fts(english_word, translation, language, search_terms)
        SELECT english, translation, language, 
               english || ' ' || translation || ' ' || COALESCE(
                 (SELECT GROUP_CONCAT(search_term, ' ') 
                  FROM multilingual_search 
                  WHERE english_word = all_words.english), ''
               ) as search_terms
        FROM all_words;
      `);
      
      console.log('‚úÖ ÂÖ®ÊñáÊ§úÁ¥¢„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàêÂÆå‰∫Ü');
    } catch (ftsError) {
      console.log('‚ö†Ô∏è  FTS5„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇÈÄöÂ∏∏„ÅÆÊ§úÁ¥¢„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ');
    }
    
    // Ê§úÁ¥¢„ÉÜ„Çπ„Éà
    console.log('\nüß™ Ê§úÁ¥¢„ÉÜ„Çπ„Éà:');
    
    const testSearches = ['cat', 'Áå´', '„Å≠„Åì', 'house', 'ÂÆ∂', 'book', 'Êú¨'];
    
    testSearches.forEach(searchTerm => {
      const results = db.prepare(`
        SELECT DISTINCT aw.english, aw.translation, aw.language, aw.gender
        FROM all_words aw
        WHERE EXISTS (
          SELECT 1 FROM multilingual_search ms 
          WHERE ms.search_term LIKE ? 
          AND ms.english_word = aw.english
        )
        OR aw.english LIKE ?
        OR aw.translation LIKE ?
        LIMIT 3
      `).all(`%${searchTerm}%`, `%${searchTerm}%`, `%${searchTerm}%`);
      
      console.log(`  "${searchTerm}": ${results.length}‰ª∂`);
      results.forEach(r => {
        console.log(`    ${r.english} ‚Üí ${r.translation} (${r.language}, ${r.gender})`);
      });
    });
    
  } catch (error) {
    console.error('‚ùå Ê§úÁ¥¢Êã°Âºµ„Ç®„É©„Éº:', error);
  } finally {
    db.close();
  }
}

enhanceSearch();